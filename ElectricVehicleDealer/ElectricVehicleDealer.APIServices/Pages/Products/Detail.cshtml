@page "{id:int}"
@using System.Collections.Generic
@using System.Linq
@using ElectricVehicleDealer.Common.DTOs.StationDtos
@model ElectricVehicleDealer.Presentation.Pages.Products.DetailModel
@{
    Layout = "_StoreLayout";
    ViewData["Title"] = $"Chi Tiết Sản Phẩm {Model.Vehicle?.Model ?? "EcoRide"}";

    var stationCars = Model.StationCars ?? new List<StationCarDTO>();
    var availableStations = stationCars.Where(sc => sc.Quantity > 0).ToList();
    var hasAvailableStation = availableStations.Any();
}

<section class="store-section">
    <div class="store-container">
        @if (!string.IsNullOrEmpty(Model.SuccessMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @Model.SuccessMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @Model.ErrorMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <div class="section-header">
            <div>
                <h1>@Model.Vehicle?.Model</h1>
                <p>@Model.Vehicle?.Type</p>
            </div>
        </div>

        <div class="store-form">
            <div class="product-grid" style="grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));">
                <div class="product-card">
                    <figure>
                        <img src="/images/bike3.jpg" alt="@Model.Vehicle?.Model">
                    </figure>
                    <div class="product-tags">
                        <span class="product-tag">@Model.Vehicle?.Color</span>
                    </div>
                    <div class="product-info">
                        <h3>Giá bán lẻ đề xuất</h3>
                        <p class="price">@Model.Vehicle?.Price.ToString("N0") VND</p>
                        @if (Model.CalculatedDeposit.HasValue)
                        {
                            <small class="text-muted d-block">Tiền đặt cọc dự kiến: @Model.CalculatedDeposit.Value.ToString("N0") VND</small>
                        }
                    </div>
                    <button class="btn-primary"
                            type="button"
                            data-bs-toggle="modal"
                            data-bs-target="#depositModal"
                            @(hasAvailableStation ? "" : "disabled")>
                        Đặt cọc online
                    </button>
                    @if (!hasAvailableStation)
                    {
                        <small class="text-danger d-block mt-2">Chưa có trạm còn xe để đặt cọc.</small>
                    }
                    <button class="btn-secondary mt-3" type="button">Tính phương án trả góp</button>
                </div>

                <div class="product-card">
                    <h3>Thông số nổi bật</h3>
                    <div class="list-modern">
                        <div class="list-item">
                            <strong>Màu xe:</strong>
                            <span>@Model.Vehicle?.Model</span>
                        </div>
                        <div class="list-item">
                            <strong>Phân khúc:</strong>
                            <span>@Model.Vehicle?.Type</span>
                        </div>
                        <div class="list-item">
                            <strong>Màu sắc:</strong>
                            <span>@Model.Vehicle?.Color</span>
                        </div>
                    </div>
                </div>

                <div class="product-card">
                    <h3>Phân bổ xe theo trạm</h3>
                    <div class="station-list">
                        @if (stationCars.Any())
                        {
                            foreach (var sc in stationCars)
                            {
                                <div class="station-item">
                                    <h4>@sc.StationName</h4>
                                    <p><strong>Địa điểm:</strong> @sc.Location</p>
                                    <p><strong>So luong con:</strong> @sc.Quantity</p>

                                    @if (sc.Quantity > 0)
                                    {
                                        <button class="btn-secondary"
                                                type="button"
                                                data-bs-toggle="modal"
                                                data-bs-target="#scheduleModal"
                                                data-station-id="@sc.StationCarId"
                                                data-station-name="@sc.StationName"
                                                data-station-location="@sc.Location">
                                            Đặt lịch lái thử xe
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn-disabled" disabled>Hết xe</button>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <p>Hiện chưa có trạm nào có xe này trong kho.</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="store-form" style="margin-top: 40px;">
            <h2 style="margin:0 0 16px;">Công nghệ dẫn đầu</h2>
            <p style="margin:0 0 24px;color:var(--store-text-subtle);">EcoRide EV3 Sport tích hợp hệ sinh thái dịch vụ, cập nhật OTA và quản lý xe thông minh qua ứng dụng EcoRide Connect.</p>
            <div class="product-grid">
                <div class="product-card">
                    <h3>Pin lithium-ion 95 kWh</h3>
                    <p>Đạt mức dự trữ năng lượng cao, tuổi thọ pin 1.000.000 km với công nghệ làm mát chủ động.</p>
                </div>
                <div class="product-card">
                    <h3>Driving Intelligence</h3>
                    <p>Hệ thống ADAS 3.0 với 12 camera và 6 radar, hỗ trợ tự lái cấp 3 trong phố.</p>
                </div>
                <div class="product-card">
                    <h3>Ứng dụng EcoRide</h3>
                    <p>Điều khiển xe từ xa, theo dõi pin, đặt lịch sạc và cập nhật phần mềm qua OTA.</p>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="modal fade schedule-modal-container" id="scheduleModal" tabindex="-1" aria-labelledby="scheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content schedule-modal">
            <form method="post" asp-page-handler="Schedule" asp-route-id="@Model.Vehicle?.VehicleId">
                <div class="modal-header schedule-modal__header">
                    <div>
                        <h5 class="modal-title" id="scheduleModalLabel">Đặt lịch lái thử</h5>
                        <p class="schedule-modal__subtitle">Chọn trạm phù hợp và thời gian thuận tiện để trải nghiệm mẫu xe bạn quan tâm.</p>
                    </div>
                    <button type="button" class="btn-close schedule-modal__close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                                <div class="modal-body schedule-modal__body">
                    <div class="schedule-modal__station">
                        <label asp-for="ScheduleStationCarId" class="schedule-modal__label">Trạm lái thử</label>
                        @if (stationCars.Any())
                        {
                            <select class="form-select schedule-modal__select"
                                    asp-for="ScheduleStationCarId"
                                    data-schedule-select>
                                @foreach (var station in stationCars)
                                {
                                    <option value="@station.StationCarId"
                                            data-station-name="@station.StationName"
                                            data-station-location="@station.Location">
                                        @station.StationName - còn @station.Quantity xe
                                    </option>
                                }
                            </select>
                        }
                        else
                        {
                            <p class="schedule-modal__empty">Chưa có trạm nào được gán cho mẫu xe này.</p>
                        }
                    </div>

                    <div class="schedule-modal__field">
                        <label asp-for="ScheduleTime" class="schedule-modal__label">Thời gian lái thử</label>
                        <input type="datetime-local"
                               class="form-control schedule-modal__input"
                               asp-for="ScheduleTime"
                               value="@(Model.ScheduleTime.HasValue ? Model.ScheduleTime.Value.ToString("yyyy-MM-ddTHH:mm") : string.Empty)"
                               min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                        <span asp-validation-for="ScheduleTime" class="schedule-modal__validation text-danger"></span>
                    </div>

                    <div class="schedule-modal__hint">
                        <strong>Lưu ý:</strong> Sau khi đặt lịch, nhân viên sẽ liên hệ để xác nhận. Lịch hẹn sẽ ở trạng thái <span>Pending</span> cho đến khi được duyệt.
                    </div>
                </div>
                <div class="modal-footer schedule-modal__footer">
                    <button type="button" class="btn schedule-modal__btn schedule-modal__btn--ghost" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn schedule-modal__btn schedule-modal__btn--primary" @(stationCars.Any() ? "" : "disabled")>Xác nhận lịch lái thử</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade deposit-modal-container" id="depositModal" tabindex="-1" aria-labelledby="depositModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content deposit-modal">
            <form method="post" asp-page-handler="Reserve" asp-route-id="@Model.Vehicle?.VehicleId">
                <div class="modal-header deposit-modal__header">
                    <h5 class="modal-title deposit-modal__title" id="depositModalLabel">Đặt cọc tại trạm</h5>
                    <button type="button" class="btn-close deposit-modal__close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body deposit-modal__body">
                    @if (hasAvailableStation)
                    {
                        <div class="deposit-modal__field">
                            <label asp-for="SelectedStationCarId" class="deposit-modal__label">Chọn trạm đang còn xe</label>
                            <select class="form-select deposit-modal__select" asp-for="SelectedStationCarId">
                                @foreach (var station in stationCars)
                                {
                                    <option value="@station.StationCarId">
                                        @station.StationName - còn @station.Quantity xe
                                    </option>
                                }
                            </select>
                            <span asp-validation-for="SelectedStationCarId" class="deposit-modal__validation text-danger"></span>
                        </div>
                        @if (Model.CalculatedDeposit.HasValue)
                        {
                            <div class="deposit-modal__summary">
                                <strong>Tiền đặt cọc:</strong>
                                <span>@Model.CalculatedDeposit.Value.ToString("N0") VND</span>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="deposit-modal__empty">Chưa có trạm nào còn xe để đặt cọc ngay lúc này.</p>
                    }
                </div>
                <div class="modal-footer deposit-modal__footer">
                    <button type="button" class="btn deposit-modal__btn deposit-modal__btn--ghost" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn deposit-modal__btn deposit-modal__btn--primary" @(hasAvailableStation ? "" : "disabled")>Xác nhận đặt cọc</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            const stationButtons = Array.from(document.querySelectorAll('[data-station-id]'));

            function createStationFromElement(element) {
                if (!element) return null;
                const id = element.getAttribute('data-station-id');
                const name = element.getAttribute('data-station-name');
                const location = element.getAttribute('data-station-location');
                return {
                    id,
                    name: name && name.trim().length ? name : null,
                    location: location && location.trim().length ? location : null
                };
            }

            const scheduleModalEl = document.getElementById('scheduleModal');
            const scheduleStationIdInput = document.getElementById('ScheduleStationCarId');
            const scheduleSelectEl = scheduleStationIdInput && scheduleStationIdInput.tagName === 'SELECT'
                ? scheduleStationIdInput
                : null;
            const scheduleOptions = scheduleSelectEl ? Array.from(scheduleSelectEl.options) : [];
            const scheduleStationNameEl = scheduleModalEl ? scheduleModalEl.querySelector('[data-schedule-station-name]') : null;
            const scheduleStationLocationEl = scheduleModalEl ? scheduleModalEl.querySelector('[data-schedule-station-location]') : null;

            function createStationFromOption(option) {
                if (!option) return null;
                const id = option.value;
                const name = option.getAttribute('data-station-name');
                const location = option.getAttribute('data-station-location');
                return {
                    id,
                    name: name && name.trim().length ? name : null,
                    location: location && location.trim().length ? location : null
                };
            }

            function findStationById(stationId) {
                if (stationId == null || stationId === '') return null;
                const key = stationId.toString();
                const option = scheduleOptions.find(opt => opt.value === key);
                if (option) {
                    return createStationFromOption(option);
                }
                const button = stationButtons.find(btn => btn.getAttribute('data-station-id') === key);
                return createStationFromElement(button);
            }

            function getFirstStation() {
                return createStationFromOption(scheduleOptions[0])
                    || createStationFromElement(stationButtons[0])
                    || null;
            }

            function renderStation(station) {
                const effectiveStation = station || null;

                if (scheduleStationNameEl) {
                    scheduleStationNameEl.textContent = effectiveStation?.name || 'Chưa chọn trạm';
                }

                if (scheduleStationLocationEl) {
                    scheduleStationLocationEl.textContent = effectiveStation?.location
                        ? `Địa điểm: ${effectiveStation.location}`
                        : 'Địa điểm đang cập nhật';
                }
            }

            function applyStation(stationId, fallbackStation) {
                const station = findStationById(stationId)
                    || fallbackStation
                    || getFirstStation();

                const resolvedId = station?.id ?? stationId ?? '';
                if (scheduleSelectEl) {
                    if (scheduleOptions.some(opt => opt.value === resolvedId)) {
                        scheduleSelectEl.value = resolvedId;
                    } else if (!scheduleSelectEl.value && scheduleOptions.length) {
                        scheduleSelectEl.value = scheduleOptions[0].value;
                    }
                } else if (scheduleStationIdInput) {
                    scheduleStationIdInput.value = resolvedId;
                }

                renderStation(station);
            }

            if (scheduleSelectEl) {
                scheduleSelectEl.addEventListener('change', function () {
                    applyStation(this.value);
                });
            }

            if (scheduleModalEl) {
                scheduleModalEl.addEventListener('show.bs.modal', function (event) {
                    const trigger = event.relatedTarget;
                    const stationId = trigger?.getAttribute('data-station-id');
                    const fallbackStation = createStationFromElement(trigger);
                    applyStation(stationId, fallbackStation);
                });
            }

            const shouldOpenScheduleModal = @(ViewData["ScheduleModalOpen"] != null ? "\"true\"" : "\"false\"");
            if (shouldOpenScheduleModal === "true" && scheduleModalEl) {
                applyStation(scheduleStationIdInput?.value);
                const scheduleModal = bootstrap.Modal.getOrCreateInstance(scheduleModalEl);
                scheduleModal.show();
            } else {
                applyStation(scheduleStationIdInput?.value);
            }

            const hasValidationError = @(ViewData.ModelState.TryGetValue(nameof(Model.SelectedStationCarId), out var entry) && entry.Errors.Count > 0 ? "true" : "false");
            if (hasValidationError === "true") {
                const modalElement = document.getElementById('depositModal');
                if (modalElement) {
                    const depositModal = new bootstrap.Modal(modalElement);
                    depositModal.show();
                }
            }
        })();
    </script>
}





